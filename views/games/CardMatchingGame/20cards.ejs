<html lang="en">

<head>
  <meta charset="utf-8">
  <title>Card Matching game</title>
  <meta name="description" content="">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <%- include('../../partials/headlinks.ejs') %>
  <link rel="stylesheet" href="/games/cardmatching/cards.css">
  <style>
    html {
      box-sizing: border-box;
    }

    *,
    *::before,
    *::after {
      box-sizing: inherit;
    }

    html,
    body {
      /* width: 100%;
      height: 100%; */
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Poppins', sans-serif;
      background: url('/images/cardmatchingbg.svg');
      background-size: cover;
    }

    .material-symbols-outlined {
      font-variation-settings:
        'FILL' 0,
        'wght' 400,
        'GRAD' 0,
        'opsz' 24
    }

    .container2 {
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column;
    }

    .score-table {
      text-align: left;
      width: 500px;
      padding: 0;
      margin: 0;
      display: flex;
      flex-direction: row;
      justify-content: space-around;
      align-items: center;
    }

    .stars {
      display: flex;
      list-style: none;
    }

    .restart {
      cursor: pointer;
    }

    .deck {
      background: linear-gradient(135deg, rgba(207, 197, 229, 1) 0%, rgba(163, 154, 204, 1) 36%, rgba(79, 71, 169, 1) 100%);
      margin: 0;
      width: 612px;
      min-height: 500px;
      box-shadow: 10px 9px 31px 1px rgba(0, 0, 0, 0.75);
      border-radius: 10px;
      display: flex;
      justify-content: space-around;
      flex-wrap: wrap;
      padding: 20px;
      margin-bottom: 15px;
      align-items: center;
      margin-top: 20px;
    }

    .card {
      transform: rotateY(0);
      transition: 0.5s;
      width: 125px;
      height: 125px;
      background: linear-gradient(to bottom, rgba(69, 72, 77, 1) 0%, rgba(0, 0, 0, 1) 100%);
      box-shadow: 5px 5px 24px -3px rgba(0, 0, 0, 0.75);
      border-radius: 8px;
      font-size: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      list-style: none;
      margin-top: 15px;
      cursor: pointer;
    }

    .show2 {
      transform: rotateY(180deg);
      transition: 0.5s;
      background: skyblue;
      font-size: 70px;
      color: white;
      cursor: default;
    }

    .match {
      background: rgb(4, 172, 54);
    }

    .no-match {
      background: rgb(175, 38, 38);
      transition: 0.1s;
    }

    .modal1 {
      z-index: 1;
      position: fixed;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.6);
      opacity: 0;
      visibility: hidden;
      transform: scale(1.1);
      transition: visibility 0s linear 0.25s, opacity 0.25s 0s, transform 0.25s;
    }

    .modal-content1 {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: rgb(241, 241, 241);
      padding: 1rem 1.5rem;
      width: 20rem;
      border-radius: 0.5rem;
      text-align: center;
    }

    .close-button {
      float: right;
      width: 1.5rem;
      line-height: 1.5rem;
      text-align: center;
      cursor: pointer;
      border-radius: 0.25rem;
      font-size: larger;
      font-weight: 500;
    }

    .close-button:hover {
      background-color: darkgray;
    }

    .show-modal1 {
      opacity: 1;
      visibility: visible;
      transform: scale(1.0);
      transition: visibility 0s linear 0s, opacity 0.25s 0s, transform 0.25s;
    }

    .tick {
      color: rgba(0, 218, 29, 0.767);
      font-size: 60px;
      margin-left: 35px;
    }

    .modal-heading {
      letter-spacing: 2px;
    }

    .stats {
      color: rgb(114 114 114);
      margin-top: 30px;
    }

    .new-game {
      background: rgb(75, 189, 0);
      color: #fff;
      border: 0;
      padding: 1em 2em;
      font-size: 1.2em;
      cursor: pointer;
      margin-top: 25px;
      border-radius: 35px;
    }

    @media screen and (max-width: 600px) {
      .deck {
        width: 340px;
        min-height: 280px;
      }

      .card {
        width: 68px;
        height: 80px;
      }

      /* .show {
        font-size: 45px;
      } */

      .modal-content {
        width: 15rem;
      }

      .tick {
        color: rgba(0, 218, 29, 0.767);
        font-size: 45px;
        margin-left: 25px;
      }

      h1 {
        font-size: 20px;
      }

      h3 {
        font-size: 16px;
      }

      .score-table {
        width: 320px;
        /* margin-right: 45px; */

      }
    }

    .cards-links {
      margin: 12px 0;
    }

    .cards-links a {
      margin: 4px;
      border: 2px solid black;
      padding: 8px 16px;
      border-radius: 8px;
      font-size: 20px;
      color: blue;
      text-decoration: none;
    }

    /* Style the dropdown button */
    .dropbtn {
      background-color: #0f9affa8;
      color: white;
      padding: 16px;
      font-size: 16px;
      border: none;
      cursor: pointer;border-radius: 30px;
    }

    /* Style the dropdown content (hidden by default) */
    .dropdown-content {
      display: none;
      position: absolute;
      background-color: #f9f9f9;
      min-width: 125px;
      box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
      z-index: 1;
      border-radius: 15px;
    }

    /* Style the links inside the dropdown */
    .dropdown-content a {
      color: black;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
    }

    /* Change color of dropdown links on hover */
    .dropdown-content a:hover {
      background-color: #ddd;
    }

    /* Show the dropdown menu on hover */
    .show{
      display: block;
    }

    /* Change the background color of the dropdown button when the dropdown content is shown */
    .dropdown:hover .dropbtn {
      background-color: #0f9affa8;
    }
  </style>
</head>

<body>
  <div class="preloader-div">
    <span class="preloader"></span>
  </div>

  <div class="container2">

    <section class="score-table" style="    margin-top: 45px;
    background: #fff100;
    padding: 15px;
    padding-inline: 0px;
    margin-bottom: 10px;
    border-radius: 30px;">
      <ul class="stars" style="margin: 0; padding: 0;">
        <li>
          <i id="star1" class="fa fa-star"></i>
        </li>
        <li>
          <i id="star2" class="fa fa-star"></i>
        </li>
        <li>
          <i id="star3" class="fa fa-star"></i>
        </li>
      </ul>
      <span class="moves">Moves: 0</span>
      <span class="timer">Elapsed Time: 0:00</span>
      <div class="restart">
        <i class="fa fa-repeat"></i>
      </div>
    </section>

    <!-- <div class="cards-links" style="
    justify-content: center;
">
      <a href="./8cards.html">8</a>
      <a href="./12cards.html">12</a>
      <a href="./16cards.html">16</a>
      <a href="./20cards.html" style="
      background-color: #0f9affa8;
  ">20</a>
      <a href="./24cards.html">24</a>
      <a href="./28cards.html">28</a>
      <a href="./32cards.html">32</a>
      <a href="./36cards.html">36</a>
      <a href="./40cards.html">40</a>
    </div> -->


    <div class="dropdown">
      <button onclick="toggleDropdown()" class="dropbtn">Select Level</button>
      <div id="dropdownContent" class="dropdown-content" style="
      margin-top: 10px;
  ">
        <a href="/games/card-matching-game/8cards">8</a>
        <a href="/games/card-matching-game/12cards">12</a>
        <a href="/games/card-matching-game/16cards">16</a>
        <a href="/games/card-matching-game/20cards" style="background-color: #fff100; border-radius: 15px;">20</a>
        <a href="/games/card-matching-game/24cards">24</a>
        <a href="/games/card-matching-game/28cards">28</a>
        <a href="/games/card-matching-game/32cards">32</a>
        <a href="/games/card-matching-game/36cards">36</a>
        <a href="/games/card-matching-game/40cards">40</a>
      </div>
    </div>

    <main>
      <ul class="deck" style="
      margin-top: 10px;
  "></ul>
    </main>

    <div>
      <button id="show-model" style="font-size: 20px;"><i class="fa-regular fa-circle-question"></i></button>
    </div>

    <div class="modal1">
      <div class="modal-content1">
        <span class="close-button">x</span>
        <i class="fa fa-check-circle tick"></i>
        <h1 class="modal-heading" style="font-size: larger;
        font-weight: bold;">Congratulations! You Won!!</h1>
        <h3 class="stats"></h3>
        <button class="new-game">Play Again!</button>
      </div>
    </div>
  </div>


  <div class="container-model-main hide">
    <section class="container-model">
      <!-- <div class="header-section-model">
        <img src="./ccc-removebg-preview.png" alt="Header Image" class="header-img">
      </div> -->

      <div class="main-content-model">
        <h4 style="margin-bottom: 3px;margin-top: 0px;/* font-weight: 500; */font-size: large;font-weight: 500;">How To
          Play Card
          Matching Game?</h4>
        <p style="
        font-size: small;margin-bottom: 5px;
    ">Welcome to the exciting world of card matching! Get ready to challenge your memory and have loads of fun.
          Follow these simple steps to become a card-matching champion:</p>

        <h4 style="margin-bottom: 3px;margin-top: 0px;/* font-weight: 500; */font-size: large;font-weight: 500;">
          Memorize the Cards:</h4>
        <p style="
        font-size: small;margin-bottom: 5px;
    ">Take a good look at all the cards on the board. Each card has a unique picture.</p>

        <h4 style="margin-bottom: 3px;margin-top: 0px;/* font-weight: 500; */font-size: large;font-weight: 500;">Click
          to Reveal:</h4>
        <p style="
        font-size: small;margin-bottom: 5px;
    ">Click on a card to reveal the picture. Remember where you saw it!</p>

        <h4 style="margin-bottom: 3px;margin-top: 0px;/* font-weight: 500; */font-size: large;font-weight: 500;">Find
          the Match:</h4>
        <p style="
        font-size: small;margin-bottom: 5px;
    ">Click on another card to find its match. If the pictures match, you've found a pair!</p>

        <h4 style="margin-bottom: 3px;margin-top: 0px;/* font-weight: 500; */font-size: large;font-weight: 500;">Tips
          for Success:</h4>
        <ul style="
        font-size: small;
    ">
          <li>Pay attention to the pictures on the cards and their placements.</li>
          <li>Try to remember where you've seen each card to make finding pairs easier.</li>
          <li>Don't rush! Take your time and enjoy the game</li>
        </ul>


        <div style="text-align: center;">
          <button id="close-model" class="close-btn-model">Close</button>
        </div>
      </div>
    </section>
  </div>
  <script src="/games/cardmatching/cards.js"></script>
  <script>
    function shuffle(array) {
      var currentIndex = array.length, temporaryValue, randomIndex;

      while (currentIndex !== 0) {
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
      }

      return array;
    }

    const modal = document.querySelector(".modal1");
    const closeButton = document.querySelector(".close-button");

    function toggleModal() {
      modal.classList.toggle("show-modal1");
    }

    function windowOnClick(event) {
      if (event.target === modal) {
        toggleModal();
      }
    }

    closeButton.addEventListener("click", toggleModal);
    window.addEventListener("click", windowOnClick);

    let cardTest = [];
    let cards = ["diamond", "diamond", "plane", "plane", "cube", "cube", "heart", "heart", "key", "key", "phone", "phone", "anchor", "anchor", "bolt", "bolt", "home", "home", "cloud", "cloud"];

    let shuffledCards = shuffle(cards);

    function createCards() {
      for (let card of shuffledCards) {
        const li = document.createElement("LI");
        li.classList.toggle("card");
        const i = document.createElement("i");
        i.classList.toggle("fa");
        if (card === "plane") {
          i.classList.toggle("fa-paper-plane");
        } else {
          i.classList.toggle("fa-" + card);
        }
        const deck = document.querySelector('.deck');
        li.appendChild(i);
        deck.appendChild(li);

      }
    }

    const ul = document.querySelector('.deck');
    let moves = document.querySelector(".moves");
    let movesCounter = 0;
    let stars = 3;
    let match = 0;
    let isfirstClick = true;
    let timerID;
    let isRestart = false;

    function initGame() {
      createCards();
      const card = document.querySelectorAll('.card');
      for (let i = 0; i < card.length; i++) {
        card[i].addEventListener("click", function (event) {
          if (card[i] !== event.target) return;
          if (event.target.classList.contains("show")) return;
          if (isfirstClick) {
            timerID = setInterval(timer, 1000);
            isfirstClick = false;
          }
          showCard(event.target);
          setTimeout(addCard, 550, shuffledCards[i], event.target, cardTest, i);
        }, false);
      }
    }

    function showCard(card) {
      card.classList.add('show2');

    }

    function addCard(card, cardHTML, testList, pos) {
      if (isRestart) {
        testList.length = 0;
        isRestart = false;
      }
      testList.push(card);
      testList.push(cardHTML)
      testList.push(pos);
      if (testList.length === 6) {
        updateMoveCounter();
        testCards(testList[0], testList[1], testList[2], testList[3], testList[4], testList[5]);
        testList.length = 0;
      }
    }

    function testCards(card1, html1, x1, card2, html2, x2) {
      if (card1 === card2 && x1 != x2) {
        cardsMatch(html1, html2);
      } else {
        cardsDontMatch(html1, html2);
      }
    }

    function cardsMatch(card1, card2) {
      card1.classList.add('match');
      card2.classList.add('match');
      match++;
      if (match === 10) {
        win();
      }
    }

    function cardsDontMatch(card1, card2) {
      card1.classList.toggle('no-match');
      card2.classList.toggle('no-match');
      setTimeout(function () {
        card1.classList.toggle('no-match');
        card2.classList.toggle('no-match');
        card1.classList.toggle('show2');
        card2.classList.toggle('show2');

      }, 300);
    }

    function win() {
      clearInterval(timerID);
      toggleModal();
      const stats = document.querySelector(".stats");
      if (s % 60 < 10) {
        stats.textContent = "You won with: " + stars + " stars in " + movesCounter + " moves with time: " + m + ":0" + s % 60;
      } else {
        stats.textContent = "You won with: " + stars + " stars in " + movesCounter + " moves with time: " + m + ":" + s % 60;
      }
    }

    function updateMoveCounter() {
      movesCounter++;
      moves.textContent = "Moves: " + movesCounter;
      if (movesCounter === 17) {
        let star = document.querySelector("#star3");
        star.classList.toggle("fa-star");
        star.classList.add("fa-star-o");
        stars--;
      } else if (movesCounter === 19) {
        let star = document.querySelector("#star2");
        star.classList.toggle("fa-star");
        star.classList.add("fa-star-o");
        stars--;
      } else if (movesCounter === 21) {
        let star = document.querySelector("#star1");
        star.classList.toggle("fa-star");
        star.classList.add("fa-star-o");
        stars--;
      }
    }

    let s = 0;
    let m = 0;
    function timer() {
      ++s;
      m = Math.floor(s / 60);
      let timer = document.querySelector(".timer");
      if (s % 60 < 10) {
        timer.textContent = "Elapsed Time: " + m + ":0" + s % 60;
      } else {
        timer.textContent = "Elapsed Time: " + m + ":" + s % 60;
      }

    }

    let restart = document.querySelector(".restart");
    restart.addEventListener("click", restartGame, false);
    function restartGame() {
      clearInterval(timerID);
      movesCounter = 0;
      match = 0;
      s = 0;
      m = 0;
      isfirstClick = true;
      isRestart = true;
      const deck = document.querySelector('.deck');
      var elements = deck.getElementsByClassName("card");

      while (elements[0]) {
        elements[0].parentNode.removeChild(elements[0]);
      }
      shuffledCards = shuffle(cards);
      let timer = document.querySelector(".timer");
      timer.textContent = "Elapsed Time: 0:00";
      moves.textContent = "Moves: " + movesCounter;

      resetStars();
      initGame();
    }

    function resetStars() {
      stars = 3;
      let star = document.querySelector("#star3");
      star.classList.remove("fa-star");
      star.classList.remove("fa-star-o");
      star.classList.add("fa-star");

      star = document.querySelector("#star2");
      star.classList.remove("fa-star");
      star.classList.remove("fa-star-o");
      star.classList.add("fa-star");

      star = document.querySelector("#star1");
      star.classList.remove("fa-star");
      star.classList.remove("fa-star-o");
      star.classList.add("fa-star");
    }

    const newGameButton = document.querySelector(".new-game");
    newGameButton.addEventListener("click", newGame);
    function newGame() {
      toggleModal();
      restartGame();
    }



    function toggleDropdown() {
      document.getElementById("dropdownContent").classList.toggle("show");
    }

    // Close the dropdown menu if the user clicks outside of it
    window.onclick = function (event) {
      if (!event.target.matches('.dropbtn')) {
        var dropdowns = document.getElementsByClassName("dropdown-content");
        var i;
        for (i = 0; i < dropdowns.length; i++) {
          var openDropdown = dropdowns[i];
          if (openDropdown.classList.contains('show')) {
            openDropdown.classList.remove('show');
          }
        }
      }
    }



    initGame();
  </script>
  <%- include('../../partials/scriptlinks.ejs') %>

</body>

</html>